/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//  https://leetcode.com/problems/binary-tree-postorder-traversal/

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) 
    {
        vector<int> res;
        // stack<TreeNode*> st1, st2;
        // if(root) st1.push(root);
        // while(!st1.empty())
        // {
        //     root = st1.top();
        //     st1.pop();
        //     st2.push(root);
        //     if(root->left) st1.push(root->left);
        //     if(root->right) st1.push(root->right);
        // }
        // while(!st2.empty())
        // {
        //     res.push_back(st2.top()->val);
        //     st2.pop();
        // }
        
//         stack<TreeNode*> st;
        
//         while(root || !st.empty())
//         {
//             if(root)
//             {
//                 st.push(root);
//                 root=root->left;
//             }
//             else
//             {
//                 TreeNode* temp = st.top()->right;
//                 if(!temp)
//                 {
//                     temp = st.top();
//                     st.pop();
//                     res.push_back(temp->val);
//                     while(!st.empty() && st.top()->right==temp)
//                     {
//                         temp = st.top();
//                         st.pop();
//                         res.push_back(temp->val);
//                     }
//                 }
//                 else
//                 {
//                     root=temp;
//                 }
//             }
//         }
        
        stack<TreeNode*> st;
        if(root) st.push(root);
        while(!st.empty())
        {
            root = st.top();
            st.pop();
            res.push_back(root->val);
            if(root->left) st.push(root->left);
            if(root->right) st.push(root->right);
        }
        reverse(res.begin(),res.end());
        return res;
        
    }
};
