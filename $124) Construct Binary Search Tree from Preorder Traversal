/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int idx=0;
    
    TreeNode* helper(vector<int> &pre, vector<int> &in, int i, int j)
    {
        if(idx==in.size() || i>j) return NULL;
        TreeNode* n = new TreeNode(pre[idx]);
        int k;
        for(int l=i; l<=j; l++) if(in[l]==pre[idx]) k=l;
        idx++;
        n->left = helper(pre,in,i,k-1);
        n->right = helper(pre,in,k+1,j);
        return n;
    }
    
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int n = preorder.size();
        vector<int> inorder;
        for(int i=0; i<n; i++) inorder.push_back(preorder[i]);
        sort(inorder.begin(),inorder.end());
        return helper(preorder,inorder,0,n-1);
    }
};
