//  https://www.codingninjas.com/codestudio/problems/1062679?topList=striver-sde-sheet-problems&utm_source=striver&utm_medium=website&leftPanelTab=1

double findNthRootOfM(int n, long long m) {
	// Write your code here.
    double low = 1;
    double high = m;
    while((high-low)>0.0000001)
    {
        double mid = (low+high)/2.0;
        if(pow(mid,n)<m) low=mid;
        else high=mid;
    }
//     return low;
    int res = low*10000000;
    double ans = ((double)res)/10000000.0;
    return ans;
}



/*
    Time Complexity : O(log(M) * log(N))
    Space Complexity : O(1),
        
    where N and M are given integers.
*/

double findNthRootOfM(int n, long long m) {

    // Variable to store maximum possible error in order
    // to obtain the precision of 10^(-6) in the answer.
    double error = 1e-7;

    // Difference between the current answer, and the answer
    // in next iteration, which we take as big as possible initially.
    double diff = 1e18;

    // Guessed answer value
    double xk = 2;

    // We keep on finding the precise answer till the difference between
    // answer of two consecutive iteration become less than 10^(-7).
    while (diff > error) {

        // Answer value in the next iteration.
        double xk_1 = (pow(xk, n) * (n - 1) + m) / (n * pow(xk, n - 1));

        // Difference of answer in consecutive states updated.
        diff = abs(xk - xk_1);

        // Updating the current answer with the answer of next iteration.
        xk = xk_1;
    }

    // Returning the nthRootOfM with precision upto 6 decimal places
    // which is xk.
    return xk;
}
