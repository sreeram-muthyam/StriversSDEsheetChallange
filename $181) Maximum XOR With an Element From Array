
typedef long long int ll;
struct Node{
    int index;
    Node *links[2];
    Node(){
        index = -1;
        links[0] = links[1] = NULL;
    }
    bool ispresent(int a){
        return links[a]!=NULL;
    }
    void put(int a, Node *node){
        links[a] = node;
    }
    Node *get_node(int a){
        return links[a];
    }
};
class Trie{
    public:
    Node *root;
    Trie(){
        root = new Node();
    }
    void insert(int num,int index){
        Node *node = root;
        for(int i =31;i>=0;i--){
            int a = (num>>i)&1;
            if(!node->ispresent(a)){
                node->put(a,new Node());
            }
            node = node->get_node(a);
        }
        node->index = index;      
    }
    int find_max(int num){
        Node *node = root;
        for(int i =31;i>=0;i--){
            int a = (num>>i)&1;
            if(node->ispresent(1-a)){
                node= node->get_node(1-a);
            }
            else{
                node = node->get_node(a);
            }
        }
        return node->index;
    }
};

class Solution {
public:
    static bool compr(vector<int> &a, vector<int> &b){
        return a[1]<b[1];
    }
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        Trie trie;
        sort(nums.begin(),nums.end());
        int n =queries.size();
        vector<int> ans(n);
        for(int i =0;i<n;i++){
            queries[i].push_back(i);
            //cout<<queries[i][0]<<" "<<queries[i][1]<<" "<<queries[i][2]<<"\n";
        }
        sort(queries.begin(),queries.end(),compr);
        int index = 0;
        for(int i =0;i<n;i++){
            while(nums[index]<=queries[i][1]){
                if(index>=nums.size()) break;
                trie.insert(nums[index],index);
                index++;
                
            }
            if(index==0) ans[queries[i][2]] = -1;
            else{
                
            int in = trie.find_max(queries[i][0]);
            cout<<in<<"\n";
            ans[queries[i][2]] = ll(queries[i][0]^nums[in]);}
        }
        return ans;
    }
};
