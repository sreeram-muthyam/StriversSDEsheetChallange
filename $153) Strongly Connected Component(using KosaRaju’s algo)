//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution
{
	public:
	
	void dfs1(vector<int> adj[], int curr, vector<bool> &vis, stack<int> &st)
	{
	    vis[curr]=true;
	    for(int i=0; i<adj[curr].size(); i++)
	        if(!vis[adj[curr][i]])
	            dfs1(adj,adj[curr][i],vis,st);
	   st.push(curr);
	}
	
	void dfs2(vector<int> rev[], int curr, vector<bool> &vis)
	{
	    vis[curr]=true;
	    for(int i=0; i<rev[curr].size(); i++)
	        if(!vis[rev[curr][i]])
	            dfs2(rev,rev[curr][i],vis);
	}
	
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int V, vector<int> adj[])
    {
        //code here
        stack<int> st;
        vector<bool> vis(V,false);
        for(int i=0; i<V; i++)
            if(!vis[i])
                dfs1(adj,i,vis,st);
        vector<int> rev[V];
        for(int i=0; i<V; i++)
            for(int j=0; j<adj[i].size(); j++)
                rev[adj[i][j]].push_back(i);
        for(int i=0; i<V; i++) vis[i]=false;
        int cnt=0;
        while(!st.empty())
        {
            if(!vis[st.top()])
            {
                cnt++;
                dfs2(rev,st.top(),vis);
            }
            st.pop();
        }
        return cnt;
    }
};

//{ Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<int> adj[V];

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
