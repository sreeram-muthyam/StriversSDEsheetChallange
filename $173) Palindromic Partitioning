//{ Driver Code Starts
// Initial Template for c++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
// User function Template for C++

class Solution{
public:

    // int helper(string str, int i, int j, vector<vector<int>> &dp)
    // {
    //     if(i>=j || isPalindrome(str,i,j)) return 0;
    //     int ans = INT_MAX, count;
    //     for(int cut=i; cut<j; cut++)
    //     {
    //         count = helper(str,i,cut,dp)+helper(str,cut+1,j,dp)+1;
    //         ans = min(ans,count);
    //     }
    //     return ans;
    // }

    int palindromicPartition(string str)
    {
        // code here
        // int n = str.size();
        // vector<vector<int>> dp(n+1,vector<int> (n+1,-1));
        // return helper(str,0,n-1,dp);
        
        //..TABULATION FORM..//
        int n = str.size();
        int C[n][n];
        bool P[n][n];
        
        for(int i=0; i<n; i++)
        {
            P[i][i] = true;
            C[i][i] = 0;
        }
        
        
        for(int len=2; len<=n; len++)
        {
            for(int i=0; i<n-len+1; i++)
            {
                int j = i+len-1;
                if(len==2)
                {
                    P[i][j]=(str[i]==str[j]);
                }
                else
                {
                    P[i][j]=(str[i]==str[j]) && P[i+1][j-1];
                }
                
                if(P[i][j]==true) C[i][j]=0;
                else
                {
                    C[i][j]=INT_MAX;
                    for(int k=i; k<j; k++)
                    {
                        C[i][j]=min(C[i][j],C[i][k]+C[k+1][j]+1);
                    }
                }
            }
        }
        return C[0][n-1];
    }
    
    // bool isPalindrome(string str, int i, int j)
    // {
    //     while(i<j)
    //     {
    //         if(str[i]!=str[j]) return false;
    //         i++;
    //         j--;
    //     }
    //     return true;
    // }
    
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        string str;
        cin>>str;
        
        Solution ob;
        cout<<ob.palindromicPartition(str)<<"\n";
    }
    return 0;
}
// } Driver Code Ends
