//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int findap(int c, vector<int> &parent)
	{
	    while(parent[c]!=-1)
	    {
	        c = parent[c];
	    }
	    return c;
	}
	
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        int ans=0;
        vector<pair<int,pair<int,int>>> arr;
        vector<int> parent(V,-1);
        vector<vector<bool>> vis(V,vector<bool>(V,false));
        for(int i=0; i<V; i++)
        {
            for(int j=0; j<adj[i].size(); j++)
            {
                if(!vis[i][adj[i][j][0]])
                {
                    arr.push_back({adj[i][j][1],{i,adj[i][j][0]}});
                    vis[i][adj[i][j][0]]=true;
                    vis[adj[i][j][0]][i]=true;
                }
            }
        }
        sort(arr.begin(),arr.end());
        int cnt=0;
        for(int i=0; i<arr.size(); i++)
        {
            if(cnt==V-1) break;
            int p1 = findap(arr[i].second.first,parent);
            int p2 = findap(arr[i].second.second,parent);
            if(p1!=-1 && p1==p2) continue;
            ans += arr[i].first;
            cnt++;
            if(p1==-1 && p2==-1) parent[arr[i].second.first]=arr[i].second.second;
            if(p1!=-1) parent[p1]=arr[i].second.second;
            else parent[p2]=arr[i].second.second;
        }
        return ans;
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
