//  https://leetcode.com/problems/palindrome-partitioning/

class Solution {
public:
   
    vector<vector<string>> partition(string s) 
    {
        vector<vector<string>> res;
        set<vector<string>> se;
        vector<string> v;
        helper(se,v,s,0);
        for(auto e: se)
        {
            res.push_back(e);
        }
        return res;
    }
    
    void helper(set<vector<string>> &se, vector<string> &v, string s, int i)
    {
        if(i>=s.length())
        {
            se.insert(v);
        }
        else
        {
            for(int len=1; len<=s.length()-i; len++)
            {
                string curr = s.substr(i,len);
                if(is_palindrome(curr))
                {
                    v.push_back(curr);
                    helper(se,v,s,i+len);
                    v.pop_back();
                }
            }
        }
    }
    
    bool is_palindrome(string curr)
    {
        int i=0, j=curr.size()-1;
        while(i<j)
        {
            if(curr[i]!=curr[j])
            {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
};
