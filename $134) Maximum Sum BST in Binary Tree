/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    int res;
    
    vector<int> helper(TreeNode* root)
    {
        if(root==NULL) return {INT_MIN,INT_MAX,0};
        vector<int> l = helper(root->left);
        vector<int> r = helper(root->right);
        int v = root->val;
        if(l[0]<v && r[1]>v)
        {
            int ans = v + l[2] + r[2];
            res = max(ans,res);
            int l_v = max({v,l[0],r[0]});
            int r_v = min({v,l[1],r[1]});
            return {l_v,r_v,v+l[2]+r[2]};
        }
        else
        {
            return {INT_MAX,INT_MIN,0};
        }
    }
    
    int maxSumBST(TreeNode* root) {
        res = 0;
        helper(root);
        return res;
    }
};
