/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

//  https://leetcode.com/problems/binary-tree-preorder-traversal/

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) 
    {
        vector<int> res;
        // TreeNode* curr = root;
        // stack<TreeNode*> st;
        // while(1)
        // {
        //     if(curr)
        //     {
        //         res.push_back(curr->val);
        //         st.push(curr);
        //         curr = curr->left;
        //     }
        //     else
        //     {
        //         if(st.empty()) break;
        //         curr = st.top();
        //         st.pop();
        //         curr = curr->right;
        //     }
        // }
        stack<TreeNode*> st;
        if(root) st.push(root);
        while(!st.empty())
        {
            root = st.top();
            st.pop();
            res.push_back(root->val);
            if(root->right) st.push(root->right);
            if(root->left) st.push(root->left);
        }
        return res;
    }
};
