class Solution {
public:
    
    bool helper(vector<int> &nums, int i, int n, int k, vector<vector<int>> &dp)
    {
        if(k==0) return true;
        if(i==n || k<0) return false;
        if(dp[i][k]!=-1) return dp[i][k];
        bool ans1 = helper(nums,i+1,n,k-nums[i],dp);
        bool ans2 = helper(nums,i+1,n,k,dp);
        return dp[i][k] = (ans1 || ans2);
    }
    
    bool canPartition(vector<int>& nums) {
        int sum = 0;
        int n = nums.size();
        for(int i=0; i<n; i++) sum+=nums[i];
        if(sum&1) return false;
        int size = (sum/2)+1;
        vector<vector<int>> dp(n+1,vector<int>(size,-1));
        return helper(nums,0,n,sum/2,dp);
    }
};
