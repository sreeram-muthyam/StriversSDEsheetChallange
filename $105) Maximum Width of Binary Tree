/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) 
    {
        queue<pair<TreeNode*,unsigned long long int>> q;
        q.push({root,1});
        unsigned long long int res=0;
        while(!q.empty())
        {
            int n = q.size();
            unsigned long long int l,r;
            for(int i=0; i<n; i++)
            {
                auto p = q.front();
                q.pop();
                TreeNode* curr = p.first;
                if(i==0) l=p.second;
                if(i==n-1) r=p.second;
                if(curr->left) q.push({curr->left,2*p.second});
                if(curr->right) q.push({curr->right,2*p.second+1});
            }
            res = max(res,r-l+1);
        }
        return res;
    }
};
