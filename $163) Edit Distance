class Solution {
public:
    
    // int helper(string &str1, string &str2, int i, int j, int n, int m, vector<vector<int>> &dp)
    // {
    //     if(i==n) return m-j;
    //     if(j==m) return n-i;
    //     if(dp[i][j]!=-1) return dp[i][j];
    //     if(str1[i]==str2[j])
    //     {
    //         return dp[i][j] = helper(str1,str2,i+1,j+1,n,m,dp);
    //     }
    //     else
    //     {
    //         int ins = 1+helper(str1,str2,i,j+1,n,m,dp);
    //         int dlt = 1+helper(str1,str2,i+1,j,n,m,dp);
    //         int rpl = 1+helper(str1,str2,i+1,j+1,n,m,dp);
    //         return dp[i][j] = min({ins,dlt,rpl});
    //     }
    // }
    
    int minDistance(string word1, string word2) 
    {
        int n = word1.size();
        int m = word2.size();
        // vector<vector<int>> dp(n,vector<int>(m,-1));
        // return helper(word1,word2,0,0,n,m,dp);
        
        vector<vector<int>> dp(n+1,vector<int>(m+1));
        
        for(int i=0; i<=n; i++)
        {
            for(int j=0; j<=m; j++)
            {
                if(i==0 || j==0)
                {
                    dp[i][j] = max(i,j);
                }
                else
                {
                    if(word1[i-1]==word2[j-1])
                    {
                        dp[i][j] = dp[i-1][j-1];
                    }
                    else
                    {
                        dp[i][j] = 1+min({dp[i][j-1],dp[i-1][j-1],dp[i-1][j]});
                    }
                }
            }
        }
        
        return dp[n][m];
        
    }
};
